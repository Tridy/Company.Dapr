# tye application configuration file
# read all about it at https://github.com/dotnet/tye
#
# when you've given us a try, we'd love to know what you think:
#    https://aka.ms/AA7q20u
#
name: company
extensions:

  # Configuration for dapr goes here.
- name: dapr
  log-level: debug
  services:
    company-manager-membership-service:
      app-protocol: grpc
    company-engine-registration-service:
      app-protocol: grpc
    company-access-user-service:
      app-protocol: grpc

  # config allows you to pass additional configuration into the dapr sidecar
  # config will be interpreted as a named k8s resource when deployed, and will be interpreted as
  # a file on disk when running locally at `./components/myconfig.yaml`
  #
  # config: myconfig

  # components-path configures the components path of the dapr sidecar
  #components-path: "./components/"

  # If not using the default Dapr placement service or otherwise using a placement service on a nonstandard port,
  # you can configure the Dapr sidecar to use an explicit port.
  # placement-port: 6050

# Services to run go here.
services:
- name: company-manager-membership-service
  project: src/Company.Manager.Membership.Service/Company.Manager.Membership.Service.csproj

- name: company-engine-registration-service
  project: src/Company.Engine.Registration.Service/Company.Engine.Registration.Service.csproj

- name: company-access-user-service
  project: src/Company.Access.User.Service/Company.Access.User.Service.csproj

- name: company-microservice-membership-service
  project: src/Company.Microservice.Membership.Service/Company.Microservice.Membership.Service.csproj
  bindings:
    - name: http
      port: 5241
      protocol: http
    - name: https
      port: 7281
      protocol: https

- name: zipkin
  image: openzipkin/zipkin-slim:latest
  bindings:
  - containerPort: 9411
    protocol: http
    connectionString: ${protocol}://${host}:${port}/api/v2/spans

- name: redis
  image: redis:latest
  bindings:
  - containerPort: 6379
    connectionString: ${host}:${port}

- name: redis-cli
  image: redis
  args: "redis-cli -h redis MONITOR"

- name: seq
  image: datalust/seq:latest
  env:
  - name: ACCEPT_EULA
    value: Y
  bindings:
  - containerPort: 80
    protocol: http
    connectionString: ${protocol}://${host}:${port}

- name: postgres
  image: postgres:latest
  env:
  - name: POSTGRES_USER
    value: postgres
  - name: POSTGRES_PASSWORD
    value: p@55w0rd1
  bindings:
  - containerPort: 5432
    connectionString: Server=${host};Port=${port};User Id=${env:POSTGRES_USER};Password=${env:POSTGRES_PASSWORD};Database=Users;Integrated Security=true;Pooling=true;
