# Configure receivers
# We only need otlp protocol on grpc, but you can use http, zipkin, jaeger, aws, etc.
# https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver
# https://www.meziantou.net/monitoring-a-dotnet-application-using-opentelemetry.htm
receivers:
  otlp:
    protocols:
      grpc:
      http:

# Configure exporters
exporters:
  #prometheus:
    #endpoint: "0.0.0.0:8889"

  logging:

  zipkin:
    endpoint: "http://dtc-zipkin:9411/api/v2/spans"
    format: proto

  #otlphttp/jaeger:
    #endpoint: "http://jaeger-all-in-one:4318"
    #tls:
    #  insecure: true

  otlphttp/seq:
    endpoint: "http://seq.image:5341/ingest/otlp"
    tls:
      insecure: true

  file:
    path: /etc/output/logs.json

# Configure processors (batch, sampling, filtering, hashing sensitive data, etc.)
# https://opentelemetry.io/docs/collector/configuration/#processors
processors:
  batch:

# Configure pipelines. Pipeline defines a path the data follows in the Collector
# starting from reception, then further processing or modification and finally
# exiting the Collector via exporters.
# https://opentelemetry.io/docs/collector/configuration/#service
# https://github.com/open-telemetry/opentelemetry-collector/blob/main/docs/design.md#pipelines
service:
  pipelines:
    traces:
      receivers: [otlp]
      processors: [batch]
      #exporters: [logging, zipkin, otlphttp/jaeger]
      exporters: [logging, zipkin]
    metrics:
      receivers: [otlp]
      processors: [batch]
      #exporters: [logging, prometheus]
      exporters: [logging]
    logs:
      receivers: [otlp]
      processors: []
      exporters: [logging, file, otlphttp/seq]
