version: '3.4'

#networks:
#  company-dapr:

services:

  ############################
  # Dapr runtime & infrastructure services
  ############################
  #dtc-redis:
  #  image: redis:6-alpine

  dtc-zipkin:
    image: openzipkin/zipkin-slim:latest
    ports:
      - 6499:9411

  #dapr-placement:
  #  image: "daprio/dapr"
  #  command: ["./placement", "-port", "50000"]

  dapr-config:
    build:
      context: ./dapr

  ############################
  # Membership Microservice
  ############################
  company.microservice.membership.service:
    image: ${DOCKER_REGISTRY-}companymicroservicemembershipservice
    build:
      context: .
      dockerfile: src/Company.Microservice.Membership.Service/Dockerfile
    depends_on:
      - seq.image
    environment:
      - CONNECTIONSTRINGS__SEQ=http://seq.image:${SEQ_API_PORT}
    #networks:
    #  - company-dapr

  company.microservice.membership.service-dapr:
    image: "daprio/daprd:latest"
    command:
      [
        "./daprd",
        "-app-id", "company-microservice-membership-service",
        "-app-port", "80",
        "-app-protocol", "grpc",
        "-log-level", "debug",
        "-components-path", "/components",
        "-config", "/config/config.yml",
        "dapr.io/config", "daprConfig"
      ]
    volumes_from:
      - dapr-config
    depends_on:
      - company.microservice.membership.service
    network_mode: "service:company.microservice.membership.service"

  ############################
  # Membership Manager
  ############################
  company.manager.membership.service:
    image: ${DOCKER_REGISTRY-}companymanagermembershipservice
    build:
      context: .
      dockerfile: src/Company.Manager.Membership.Service/Dockerfile
    depends_on:
      - seq.image
    environment:
      - CONNECTIONSTRINGS__SEQ=http://seq.image:${SEQ_API_PORT}
    #networks:
    #  - company-dapr

  company.manager.membership.service-dapr:
    image: "daprio/daprd:latest"
    command:
      [
        "./daprd",
        "-app-id", "company-manager-membership-service",
        "-app-port", "80",
        "-app-protocol", "grpc",
        "-log-level", "debug",
        "-components-path", "/components",
        "-config", "/config/config.yml",
        "dapr.io/config", "daprConfig"
      ]
    volumes_from:
      - dapr-config
    depends_on:
      - company.manager.membership.service
    network_mode: "service:company.manager.membership.service"

  ############################
  # Registration Engine
  ############################
  company.engine.registration.service:
    image: ${DOCKER_REGISTRY-}companyengineregistrationservice
    build:
      context: .
      dockerfile: src/Company.Engine.Registration.Service/Dockerfile
    depends_on:
      - seq.image
    environment:
      - CONNECTIONSTRINGS__SEQ=http://seq.image:${SEQ_API_PORT}
    #networks:
    #  - company-dapr

  company.engine.registration.service-dapr:
    image: "daprio/daprd:latest"
    command:
      [
        "./daprd",
        "-app-id", "company-engine-registration-service",
        "-app-port", "80",
        "-app-protocol", "grpc",
        "-log-level", "debug",
        "-components-path", "/components",
        "-config", "/config/config.yml",
        "dapr.io/config", "daprConfig"
      ]
    volumes_from:
      - dapr-config
    depends_on:
      - company.engine.registration.service
    network_mode: "service:company.engine.registration.service"

  ############################
  # User Access
  ############################
  company.access.user.service:
    image: ${DOCKER_REGISTRY-}companyaccessuserservice
    build:
      context: .
      dockerfile: src/Company.Access.User.Service/Dockerfile
    depends_on:
      - redis.image
      - postgres.image
      - seq.image
    environment:
      - CONNECTIONSTRINGS__REDIS=redis.image
      - CONNECTIONSTRINGS__POSTGRES=Server=postgres.image;Port=${POSTGRES_PORT};User Id=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};Database=Users;Integrated Security=true;Pooling=true;
      - CONNECTIONSTRINGS__SEQ=http://seq.image:${SEQ_API_PORT}
    #networks:
    #  - company-dapr

  company.access.user.service-dapr:
    image: "daprio/daprd:latest"
    command:
      [
        "./daprd",
        "-app-id", "company-access-user-service",
        "-app-port", "80",
        "-app-protocol", "grpc",
        "-log-level", "debug",
        "-components-path", "/components",
        "-config", "/config/config.yml",
        "dapr.io/config", "daprConfig"
      ]
    volumes_from:
      - dapr-config
    depends_on:
      - company.access.user.service
    network_mode: "service:company.access.user.service"

  ############################
  # Redis state store
  ############################
  redis.image:
    image: redis:latest
    ports:
      - 6385:6379
    #networks:
    #  - company-dapr

  ############################
  # Seq logging
  ############################
  seq.image:
    #command: --memory=16g --memory-swap=16g
    image: datalust/seq:latest
    volumes:
      - ${SEQ_DATA}:/data
    ports:
      - 5342:${SEQ_API_PORT}
      - 81:${SEQ_UI_PORT}
    environment:
      - ACCEPT_EULA=Y
    #networks:
    #  - company-dapr

  ############################
  # Postgres state store
  ############################
  postgres.image:
    image: postgres:latest
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - 5433:${POSTGRES_PORT}
    volumes:
      - ${POSTGRES_DATA}:/var/lib/postgresql/data
    #networks:
    #  - company-dapr
